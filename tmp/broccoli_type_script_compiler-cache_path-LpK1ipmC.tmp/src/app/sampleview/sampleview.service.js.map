{"version":3,"file":"sampleview.service.js","sourceRoot":"","sources":["../../Users/DarkerThanBlack/Projects/html/angular2sample/tmp/broccoli_type_script_compiler-input_base_path-oeFgxptH.tmp/0/src/app/sampleview/sampleview.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,qBAAwC,eAAe,CAAC,CAAA;AACxD,QAAO,uBACP,CAAC,CAD6B;AAC9B,2BAA2B,iBAAiB,CAAC,CAAA;AAG7C;IAWC,2BAAoB,IAAW;QAAX,SAAI,GAAJ,IAAI,CAAO;QAE9B,IAAI,CAAC,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QACvB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;QACxD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAC;IAEzD,CAAC;IAZD,qCAAS,GAAT,UAAU,QAAQ;QACjB,IAAI,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;QAC/C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,0BAA0B,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC;aACjF,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC,CAAC;IACpC,CAAC;IAWO,uCAAW,GAAnB,UAAoB,GAAa;QAChC,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC;IACxB,CAAC;IACO,uCAAW,GAAnB,UAAoB,KAAU;QAC7B,oEAAoE;QACpE,8DAA8D;QAC9D,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO;YAC3C,KAAK,CAAC,MAAM,GAAM,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,GAAG,cAAc,CAAC;QACzE,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;QAChD,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACjC,CAAC;IAhCF;QAAC,iBAAU,EAAE;;yBAAA;IAoCb,wBAAC;AAAD,CAAC,AAnCD,IAmCC;AAnCY,yBAAiB,oBAmC7B,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Response, Headers } from '@angular/http';\nimport 'rxjs/add/operator/map'\nimport { Observable } from 'rxjs/Observable';\n\n@Injectable()\nexport class SampleviewService {\n\n\tprivate headers: Headers;\n\tpublic result;\n\n\tgetHeroes(itemdata): Observable<Response> {\n\t\tlet toAdd = JSON.stringify({ name: itemdata });\n\t\treturn this.http.post('http://hcareapi.dev/ping', toAdd, { headers: this.headers })\n\t\t\t.map(response => response.json());\n\t}\n\n\tconstructor(private http : Http) {\n\n\t\tthis.headers = new Headers();\n        this.headers.append('Content-Type', 'application/json');\n        this.headers.append('Accept', 'application/json');\n\n\t}\n\n\t\n\tprivate extractData(res: Response) {\n\t\tlet body = res.json();\n\t\treturn body.data || {};\n\t}\n\tprivate handleError(error: any) {\n\t\t// In a real world app, we might use a remote logging infrastructure\n\t\t// We'd also dig deeper into the error to get a better message\n\t\tlet errMsg = (error.message) ? error.message :\n\t\t\terror.status ? `${error.status} - ${error.statusText}` : 'Server error';\n\t\tconsole.error(errMsg); // log to console instead\n\t\treturn Observable.throw(errMsg);\n\t}\n\n\n\n}\n"]}